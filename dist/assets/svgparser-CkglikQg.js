class T{constructor(){this.queue=[],this.cache=null}combine(t,s){return[t[0]*s[0]+t[2]*s[1],t[1]*s[0]+t[3]*s[1],t[0]*s[2]+t[2]*s[3],t[1]*s[2]+t[3]*s[3],t[0]*s[4]+t[2]*s[5]+t[4],t[1]*s[4]+t[3]*s[5]+t[5]]}isIdentity(){this.cache||(this.cache=this.toArray());const t=this.cache;return t[0]===1&&t[1]===0&&t[2]===0&&t[3]===1&&t[4]===0&&t[5]===0}matrix(t){return t[0]===1&&t[1]===0&&t[2]===0&&t[3]===1&&t[4]===0&&t[5]===0?this:(this.cache=null,this.queue.push(t),this)}translate(t,s){return(t!==0||s!==0)&&(this.cache=null,this.queue.push([1,0,0,1,t,s])),this}scale(t,s){return(t!==1||s!==1)&&(this.cache=null,this.queue.push([t,0,0,s,0,0])),this}rotate(t,s,r){if(t!==0){this.translate(s,r);const a=t*Math.PI/180,o=Math.cos(a),i=Math.sin(a);this.queue.push([o,i,-i,o,0,0]),this.cache=null,this.translate(-s,-r)}return this}skewX(t){return t!==0&&(this.cache=null,this.queue.push([1,0,Math.tan(t*Math.PI/180),1,0,0])),this}skewY(t){return t!==0&&(this.cache=null,this.queue.push([1,Math.tan(t*Math.PI/180),0,1,0,0])),this}toArray(){if(this.cache)return this.cache;if(!this.queue.length)return this.cache=[1,0,0,1,0,0],this.cache;if(this.cache=this.queue[0],this.queue.length===1)return this.cache;for(let t=1;t<this.queue.length;t++)this.cache=this.combine(this.cache,this.queue[t]);return this.cache}calc(t,s,r=!1){if(!this.queue.length)return[t,s];this.cache||(this.cache=this.toArray());const a=this.cache;return[t*a[0]+s*a[2]+(r?0:a[4]),t*a[1]+s*a[3]+(r?0:a[5])]}}const m=1e-9;function d(e,t,s=m){return Math.abs(e-t)<s}function z(e,t,s){const r=e.x-t.x,a=e.y-t.y;return r*r+a*a<s*s}function C(e){return e*(Math.PI/180)}function G(e){return e*(180/Math.PI)}function D(e,t,s){if(d(e.x,t.x)&&d(s.x,e.x))return!d(s.y,t.y)&&!d(s.y,e.y)&&s.y<Math.max(t.y,e.y)&&s.y>Math.min(t.y,e.y);if(d(e.y,t.y)&&d(s.y,e.y))return!d(s.x,t.x)&&!d(s.x,e.x)&&s.x<Math.max(t.x,e.x)&&s.x>Math.min(t.x,e.x);if(s.x<e.x&&s.x<t.x||s.x>e.x&&s.x>t.x||s.y<e.y&&s.y<t.y||s.y>e.y&&s.y>t.y||d(s.x,e.x)&&d(s.y,e.y)||d(s.x,t.x)&&d(s.y,t.y))return!1;const r=(s.y-e.y)*(t.x-e.x)-(s.x-e.x)*(t.y-e.y);if(Math.abs(r)>m)return!1;const a=(s.x-e.x)*(t.x-e.x)+(s.y-e.y)*(t.y-e.y);if(a<0||d(a,0))return!1;const o=(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y);return!(a>o||d(a,o))}function O(e,t,s,r,a){const o=t.y-e.y,i=e.x-t.x,n=t.x*e.y-e.x*t.y,c=r.y-s.y,u=s.x-r.x,l=r.x*s.y-s.x*r.y,x=o*u-c*i,y=(i*l-u*n)/x,f=(c*n-o*l)/x;return!isFinite(y)||!isFinite(f)||!a&&(Math.abs(e.x-t.x)>m&&(e.x<t.x?y<e.x||y>t.x:y>e.x||y<t.x)||Math.abs(e.y-t.y)>m&&(e.y<t.y?f<e.y||f>t.y:f>e.y||f<t.y)||Math.abs(s.x-r.x)>m&&(s.x<r.x?y<s.x||y>r.x:y>s.x||y<r.x)||Math.abs(s.y-r.y)>m&&(s.y<r.y?f<s.y||f>r.y:f>s.y||f<r.y))?null:{x:y,y:f}}const L={withinDistance:z,lineIntersect:O,almostEqual:d,QuadraticBezier:{isFlat:function(e,t,s,r){r=4*r*r;let a=2*s.x-e.x-t.x;a*=a;let o=2*s.y-e.y-t.y;return o*=o,a+o<=r},linearize:function(e,t,s,r){const a=[e],o=[{p1:e,p2:t,c1:s}];for(;o.length>0;){const i=o[0];if(this.isFlat(i.p1,i.p2,i.c1,r))a.push({x:i.p2.x,y:i.p2.y}),o.shift();else{const n=this.subdivide(i.p1,i.p2,i.c1,.5);o.splice(0,1,n[0],n[1])}}return a},subdivide:function(e,t,s,r){const a={x:e.x+(s.x-e.x)*r,y:e.y+(s.y-e.y)*r},o={x:s.x+(t.x-s.x)*r,y:s.y+(t.y-s.y)*r},i={x:a.x+(o.x-a.x)*r,y:a.y+(o.y-a.y)*r};return[{p1:e,p2:i,c1:a},{p1:i,p2:t,c1:o}]}},CubicBezier:{isFlat:function(e,t,s,r,a){a=16*a*a;let o=3*s.x-2*e.x-t.x;o*=o;let i=3*s.y-2*e.y-t.y;i*=i;let n=3*r.x-2*t.x-e.x;n*=n;let c=3*r.y-2*t.y-e.y;return c*=c,o<n&&(o=n),i<c&&(i=c),o+i<=a},linearize:function(e,t,s,r,a){const o=[e],i=[{p1:e,p2:t,c1:s,c2:r}];for(;i.length>0;){const n=i[0];if(this.isFlat(n.p1,n.p2,n.c1,n.c2,a))o.push({x:n.p2.x,y:n.p2.y}),i.shift();else{const c=this.subdivide(n.p1,n.p2,n.c1,n.c2,.5);i.splice(0,1,c[0],c[1])}}return o},subdivide:function(e,t,s,r,a){const o={x:e.x+(s.x-e.x)*a,y:e.y+(s.y-e.y)*a},i={x:r.x+(t.x-r.x)*a,y:r.y+(t.y-r.y)*a},n={x:s.x+(r.x-s.x)*a,y:s.y+(r.y-s.y)*a},c={x:o.x+(n.x-o.x)*a,y:o.y+(n.y-o.y)*a},u={x:n.x+(i.x-n.x)*a,y:n.y+(i.y-n.y)*a},l={x:c.x+(u.x-c.x)*a,y:c.y+(u.y-c.y)*a};return[{p1:e,p2:l,c1:o,c2:c},{p1:l,p2:t,c1:u,c2:i}]}},Arc:{linearize:function(e,t,s,r,a,o,i,n){const c=[t];let u=this.svgToCenter(e,t,s,r,a,o,i);const l=[u];for(;l.length>0;){u=l[0];const x=this.centerToSvg(u.center,u.rx,u.ry,u.theta,u.extent,u.angle),f=this.centerToSvg(u.center,u.rx,u.ry,u.theta,.5*u.extent,u.angle).p2,h={x:.5*(x.p1.x+x.p2.x),y:.5*(x.p1.y+x.p2.y)};if(z(h,f,n))c.unshift(x.p2),l.shift();else{const b={...u,extent:.5*u.extent},M={...u,theta:u.theta+.5*u.extent,extent:.5*u.extent};l.splice(0,1,b,M)}}return c},centerToSvg:function(e,t,s,r,a,o){const i=r+a,n=C(r),c=C(i),u=C(o),l=Math.cos(u),x=Math.sin(u),y=Math.cos(n),f=Math.sin(n),h=Math.cos(c),b=Math.sin(c),M=e.x+l*t*y+-x*s*f,g=e.y+x*t*y+l*s*f,p=e.x+l*t*h+-x*s*b,w=e.y+x*t*h+l*s*b;return{p1:{x:M,y:g},p2:{x:p,y:w},rx:t,ry:s,angle:o,largearc:a>180?1:0,sweep:a>0?1:0}},svgToCenter:function(e,t,s,r,a,o,i){const n={x:.5*(e.x-t.x),y:.5*(e.y-t.y)},c=C(a%360),u=Math.cos(c),l=Math.sin(c),x=u*n.x+l*n.y,y=-l*n.x+u*n.y;s=Math.abs(s),r=Math.abs(r);let f=s*s,h=r*r,b=x*x,M=y*y;const g=b/f+M/h;if(g>1){const _=Math.sqrt(g);s=_*s,r=_*r,f=s*s,h=r*r}const p=o===i?-1:1;let w=(f*h-f*M-h*b)/(f*M+h*b);w=w<0?0:w;const E=p*Math.sqrt(w),P=E*(s*y/r),S=E*-(r*x/s),V={x:(e.x+t.x)/2+(u*P-l*S),y:(e.y+t.y)/2+(l*P+u*S)},k=(x-P)/s,v=(y-S)/r,R=(-x-P)/s,I=(-y-S)/r,X=Math.sqrt(k*k+v*v);let N=Math.acos(k/X);v<0&&(N*=-1);const Y=Math.sqrt((k*k+v*v)*(R*R+I*I));let F=Math.acos((k*R+v*I)/Y);k*I-v*R<0&&(F*=-1);let j=G(N),q=G(F%(2*Math.PI));return!i&&q>0&&(q-=360),i&&q<0&&(q+=360),{center:V,rx:s,ry:r,theta:j,extent:q,angle:a}}},getPolygonBounds:function(e){if(!e||e.length<1)return null;let t=e[0].x,s=e[0].x,r=e[0].y,a=e[0].y;for(let o=1;o<e.length;o++)e[o].x>s?s=e[o].x:e[o].x<t&&(t=e[o].x),e[o].y>a?a=e[o].y:e[o].y<r&&(r=e[o].y);return{x:t,y:r,width:s-t,height:a-r}},pointInPolygon:function(e,t){if(!t||t.length<3)return null;let s=!1;const r=t.offsetx||0,a=t.offsety||0;for(let o=0,i=t.length-1;o<t.length;i=o++){const n=t[o].x+r,c=t[o].y+a,u=t[i].x+r,l=t[i].y+a;if(d(n,e.x)&&d(c,e.y)||D({x:n,y:c},{x:u,y:l},e))return null;if(d(n,u)&&d(c,l))continue;c>e.y!=l>e.y&&e.x<(u-n)*(e.y-c)/(l-c)+n&&(s=!s)}return s},polygonArea:function(e){let t=0;for(let s=0,r=e.length-1;s<e.length;r=s++)t+=(e[r].x+e[s].x)*(e[r].y-e[s].y);return .5*t}};class Z{constructor(){this.svg=null,this.svgRoot=null,this.allowedElements=["svg","circle","ellipse","path","polygon","polyline","rect","line"],this.conf={tolerance:2,toleranceSvg:.005}}config(t){t&&t.tolerance&&(this.conf.tolerance=t.tolerance)}load(t){if(!t||typeof t!="string")throw new Error("Invalid SVG string");const r=new DOMParser().parseFromString(t,"image/svg+xml");if(!r||r.querySelector("parsererror"))throw new Error("Failed to parse SVG string");if(this.svg=r,this.svgRoot=r.querySelector("svg"),!this.svgRoot)throw new Error("No SVG root element found in the provided string");return this.svgRoot}cleanInput(){return this.svgRoot?(this.applyTransform(this.svgRoot),this.flatten(this.svgRoot),this.filter(this.allowedElements),this.svgRoot):null}getStyle(){return this.svgRoot?this.svgRoot.querySelector("style"):!1}transformParse(t){const s=/\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*(.*?)\s*\)[\s,]*/,r=/[\s,]+/,a=new T;let o="";return t.split(s).forEach(i=>{if(!i||!i.length)return;if(["matrix","translate","scale","rotate","skewX","skewY"].includes(i)){o=i;return}const n=i.split(r).map(c=>+c||0);switch(o){case"matrix":n.length===6&&a.matrix(n);break;case"scale":a.scale(n[0],n.length>1?n[1]:n[0]);break;case"rotate":a.rotate(n[0],n[1]||0,n[2]||0);break;case"translate":a.translate(n[0],n[1]||0);break;case"skewX":n.length===1&&a.skewX(n[0]);break;case"skewY":n.length===1&&a.skewY(n[0]);break}}),a}applyTransform(t,s=new T){const r=t.getAttribute("transform");let a=s;if(r){const o=this.transformParse(r);a=new T;const i=a.combine(s.toArray(),o.toArray());a.matrix(i)}if(["g","svg","defs"].includes(t.tagName)){t.removeAttribute("transform");for(const o of Array.from(t.children))this.applyTransform(o,a)}else if(!a.isIdentity()&&this.allowedElements.includes(t.tagName)&&t.tagName!=="svg"){const i=this.polygonify(t).map(n=>{const[c,u]=a.calc(n.x,n.y);return{x:c,y:u}});if(i.length>0){let n=i.map((u,l)=>(l===0?"M ":"L ")+u.x+" "+u.y).join(" ");t.tagName!=="polyline"&&t.tagName!=="line"&&(n+=" Z");const c=document.createElementNS("http://www.w3.org/2000/svg","path");c.setAttribute("d",n);for(const u of t.attributes)["transform","x","y","width","height","cx","cy","r","rx","ry","points","d","x1","y1","x2","y2"].includes(u.name)||c.setAttribute(u.name,u.value);t.parentElement&&t.parentElement.replaceChild(c,t)}}else for(const o of Array.from(t.children))this.applyTransform(o,a)}flatten(t){if(t.tagName==="g"&&t.parentElement){for(;t.firstChild;)t.parentElement.insertBefore(t.firstChild,t);t.parentElement.removeChild(t)}for(const s of Array.from(t.children))this.flatten(s)}filter(t,s=this.svgRoot){const r=Array.from(s.children);for(const a of r)this.filter(t,a);!t.includes(s.tagName)&&s.parentElement&&s.parentElement.removeChild(s)}recurse(t,s){Array.from(t.children).forEach(a=>this.recurse(a,s)),s(t)}parsePath(t){const s=/([a-zA-Z])/,r=/[\s,]+/,a=t.split(r).filter(y=>y.length>0),o=[];let i=[],n=0,c=0,u=0,l=0,x="";for(;a.length>0;){let y=a.shift();y.match(s)?x=y:a.unshift(y);const h=()=>parseFloat(a.shift());switch(x){case"M":i.length>0&&o.push(i),i=[],n=h(),c=h(),i.push({x:n,y:c}),u=n,l=c,x="L";break;case"m":i.length>0&&o.push(i),i=[],n+=h(),c+=h(),i.push({x:n,y:c}),u=n,l=c,x="l";break;case"L":n=h(),c=h(),i.push({x:n,y:c});break;case"l":n+=h(),c+=h(),i.push({x:n,y:c});break;case"H":n=h(),i.push({x:n,y:c});break;case"h":n+=h(),i.push({x:n,y:c});break;case"V":c=h(),i.push({x:n,y:c});break;case"v":c+=h(),i.push({x:n,y:c});break;case"Z":case"z":i.length>0&&(i.push({x:u,y:l}),o.push(i),i=[]),n=u,c=l;break;case"C":n=h(),c=h(),h(),h(),h(),h(),i.push({x:n,y:c});break;case"c":n+=h(),c+=h(),h(),h(),h(),h(),i.push({x:n,y:c});break;case"S":n=h(),c=h(),h(),h(),i.push({x:n,y:c});break;case"s":n+=h(),c+=h(),h(),h(),i.push({x:n,y:c});break;case"Q":n=h(),c=h(),h(),h(),i.push({x:n,y:c});break;case"q":n+=h(),c+=h(),h(),h(),i.push({x:n,y:c});break;case"T":n=h(),c=h(),i.push({x:n,y:c});break;case"t":n+=h(),c+=h(),i.push({x:n,y:c});break;case"A":n=h(),c=h(),h(),h(),h(),h(),h(),i.push({x:n,y:c});break;case"a":n+=h(),c+=h(),h(),h(),h(),h(),h(),i.push({x:n,y:c});break;default:return console.warn(`Unsupported SVG path command: ${x}`),i.length>0&&o.push(i),o}}return i.length>0&&o.push(i),o}polygonify(t){let s=[];switch(t.tagName){case"polygon":case"polyline":for(let g=0;g<t.points.length;g++){const p=t.points.getItem(g);s.push({x:p.x,y:p.y})}break;case"rect":const r=parseFloat(t.getAttribute("x"))||0,a=parseFloat(t.getAttribute("y"))||0,o=parseFloat(t.getAttribute("width")),i=parseFloat(t.getAttribute("height"));s.push({x:r,y:a},{x:r+o,y:a},{x:r+o,y:a+i},{x:r,y:a+i});break;case"circle":case"ellipse":const n=parseFloat(t.getAttribute("cx")),c=parseFloat(t.getAttribute("cy")),u=parseFloat(t.getAttribute("rx")||t.getAttribute("r")),l=parseFloat(t.getAttribute("ry")||t.getAttribute("r")),x=Math.ceil(2*Math.PI/Math.acos(1-this.conf.tolerance/Math.max(u,l)));for(let g=0;g<Math.max(x,3);g++){const p=g*(2*Math.PI)/x;s.push({x:u*Math.cos(p)+n,y:l*Math.sin(p)+c})}break;case"line":const y=parseFloat(t.getAttribute("x1"))||0,f=parseFloat(t.getAttribute("y1"))||0,h=parseFloat(t.getAttribute("x2"))||0,b=parseFloat(t.getAttribute("y2"))||0;s.push({x:y,y:f},{x:h,y:b});break;case"path":const M=t.getAttribute("d");if(M){const g=this.parsePath(M);g.length>0&&(s=g[0])}break}return s.length>1&&L.almostEqual(s[0].x,s[s.length-1].x,this.conf.toleranceSvg)&&L.almostEqual(s[0].y,s[s.length-1].y,this.conf.toleranceSvg)&&s.pop(),s}}export{Z as S};
